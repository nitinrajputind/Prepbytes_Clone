const project_data = [
  {
    id: 0,
    name: "HTML",
    img:"https://res.cloudinary.com/dpqbph9ya/image/upload/f_auto,q_auto/v1/prepbytes%20clone/jwpufxzm7mbc6ub2durh",
    topics1: "HTML Document Structure",
    topics2: "HTML Elements",
    topics3: "HTML Attributes",
    topics4: "HTML Semantic Elements",
    topics5: "HTML Forms",
    topics6: "HTML Links",
    topics7: "HTML Multimedia",
    topics8: "HTML Lists",
    topics9: "HTML Tables",
    topics10: "HTML Meta Tags",
    definition: "HTML (Hypertext Markup Language) is the standard markup language used to create web pages. It is the foundation of web development and provides a structured way to format content, including text, images, links, and multimedia, and define the layout and structure of a web page. HTML uses a system of elements or tags to mark up content, and browsers use this markup to render web pages.HTML documents consist of a set of elements that are enclosed within angle brackets (< >) and are organized in a hierarchical structure. Elements can be used to define headings, paragraphs, lists, tables, forms, links, and more. These elements can also include attributes to provide additional information about the elements, such as source URLs for images or hyperlinks.",
    detail1:"HTML Document Structure:HTML Document Structure: The basic structure of an HTML document, including the <!DOCTYPE>, <html>, <head>, and <body> elements.",
    detail2:"HTML Elements:HTML Tags: Commonly used HTML tags like headings (<h1>, <h2>, etc.), paragraphs (<p>), lists (<ul>, <ol>, <li>), and links (<a>).Images (<img>): Adding images to web pages.Forms (<form>): Creating forms for user input.Tables (<table>): Constructing tables to display data.Media Elements: Embedding audio (<audio>) and video (<video>).",
    detail3:"HTML Attributes:Understanding HTML attributes like class, id, src, href, alt, and style.",
    detail4:"TML Semantic Elements:Semantic HTML elements like <header>, <nav>, <main>, <article>, <section>, and <footer, which provide meaning and structure to web content.",
    detail5:"Form controls: Input fields (<input>), text areas (<textarea>), radio buttons (<input type=radio>), checkboxes (<input type=checkbox>), and select boxes (<select>).",
    detail6:"Creating hyperlinks and linking to external websites, internal pages, and resources.",
    detail7:"Embedding images, audio, and video.",
    detail8:"Ordered lists (<ol>), unordered lists (<ul>), and definition lists (<dl>).",
    detail9:"Creating tables, table headers (<th>), table data (<td>), and table structure.",
    detail10:"Metadata tags like <meta> for specifying character encoding, keywords, and descriptions.",
  },
  {
    id: 1,
    name: "CSS",
    img:"https://res.cloudinary.com/dpqbph9ya/image/upload/f_auto,q_auto/v1/prepbytes%20clone/yrodtus3hxmvawnznyjs",
    topics1: "CSS Selectors",
    topics2: "CSS Properties",
    topics3: "Box Model",
    topics4: "Layout and Positioning",
    topics5: "Responsive Web Design",
    topics6: "Typography",
    topics7: "Colors and Backgrounds",
    topics8: "Transitions and Animations",
    topics9: "CSS Pseudo-Classes and Pseudo-Elements",
    topics10: "CSS Specificity and Inheritance",
    definition:"CSS, or Cascading Style Sheets, is a language used for defining the presentation and visual formatting of web documents. It provides a way to control the layout and design of web pages, allowing web developers to specify the appearance of text, images, links, and other elements on a web page. CSS enables the separation of content (usually written in HTML) from its presentation, making it easier to create attractive and consistent web designs. It is used to define the styles, such as colors, fonts, margins, padding, and positioning, for HTML and XML elements. CSS selectors are used to target HTML elements, and properties are used to specify how those elements should be styled. This separation of content and presentation, along with the cascading nature of CSS, makes it an essential tool for creating visually appealing and well-structured web pages.",
    detail1: "Understanding CSS selectors to target HTML elements for styling.",
    detail2: "Knowledge of CSS properties to control elements' appearance, such as color, font-size, margin, padding, and background-color",
    detail3: "Understanding the CSS box model, which includes the content area, padding, border, and margin.",
    detail4: "Techniques for creating layouts, including display, position, float, and CSS Grid and Flexbox for modern layout design.",
    detail5:"Designing web pages that adapt to different screen sizes using media queries, relative units (em, rem, %), and fluid layouts.",
    detail6:"Styling text with properties like font-family, font-weight, line-height, and text alignment.",
    detail7:"Setting background colors and images, and working with color properties",
    detail8:"Adding smooth transitions and animations to elements using properties like transition, animation, and keyframes.",
    detail9:"Utilizing pseudo-classes (e.g., :hover, :focus) and pseudo-elements (e.g., ::before, ::after) for more precise styling.",
    detail10:"Understanding specificity in CSS to resolve conflicting styles, and how styles are inherited by child elements.",
  },
  {
    id: 2,
    name: "Javascript",
    img:"https://res.cloudinary.com/dpqbph9ya/image/upload/f_auto,q_auto/v1/prepbytes%20clone/i78ecvbyjwqtp2lyjthm",
    topics1: "Basic Syntax and Data Types",
    topics2: "Control Structures",
    topics3: "Functions",
    topics4: "Objects and Object-Oriented Programming (OOP)",
    topics5: "Arrays",
    topics6: "DOM Manipulation",
    topics7: "Events",
    topics8: "Asynchronous JavaScript",
    topics9: "Closures",
    topics10: "Scopes and Hoisting",
    definition:"JavaScript, often abbreviated as JS, is a dynamic and versatile programming language used primarily for web development. It plays a pivotal role in enhancing the functionality and interactivity of websites and web applications. JavaScript is executed within web browsers, making it a client-side scripting language, and it's instrumental in enabling user interactions, dynamic content generation, and data manipulation without requiring page reloads.One of JavaScript's key strengths is its ability to access and modify the Document Object Model (DOM), representing the structure and content of web pages. This allows developers to create responsive and interactive web elements, such as forms, buttons, and animations, in response to user actions. JavaScript can also communicate with web servers through asynchronous requests, commonly referred to as AJAX, enabling real-time data exchange and seamless user experiences.",
    detail1: "Understanding JavaScript's syntax, variables, data types (e.g., numbers, strings, booleans), and basic operations.",
    detail2: "Working with control structures such as if statements, for and while loops, and switch statements.",
    detail3: "Creating and using functions, including function declarations and expressions, as well as parameters and return values.",
    detail4: "Understanding objects, properties, and methods. Knowledge of OOP concepts like constructors and prototypes.",
    detail5:"Working with arrays, including adding, modifying, and iterating through elements.",
    detail6:"Interacting with the Document Object Model (DOM) to change and update web page content dynamically.",
    detail7:"Handling and responding to user and browser events (e.g., click, submit, keypress).",
    detail8:"Callbacks, Promises, and the async/await syntax for handling asynchronous operations and making HTTP requests.",
    detail9:"Understanding closures and their applications in JavaScript.",
    detail10:"Scope chains, variable hoisting, and how they affect variable access.",
  },
  {
    id: 3,
    name: "Reactjs",
    img:"https://res.cloudinary.com/dwu1oncja/image/upload/f_auto,q_auto/v1/project_img/ReactBlog",
    topics1: "Components",
    topics2: "JSX (JavaScript XML)",
    topics3: "State and Props",
    topics4: "Component Lifecycle",
    topics5: "React Hooks",
    topics6: "Conditional Rendering",
    topics7: "Lists and Keys",
    topics8: "Forms and Controlled Components",
    topics9: "Event Handling",
    topics10: "Styling in React",
    definition:"React, often stylized as React.js or simply React, is an open-source JavaScript library widely utilized for building user interfaces in web and mobile applications. Developed and maintained by Facebook, React simplifies the process of creating interactive and responsive UI components. It's renowned for its component-based architecture, enabling developers to break down complex user interfaces into smaller, reusable pieces.React employs a declarative approach, allowing developers to specify how UI components should appear and behave in response to data changes. It efficiently manages the rendering of components, updating only the parts of a web page that have changed, resulting in enhanced performance and a smoother user experience.",
    detail1: "Understanding the concept of components in React and how to create functional and class components.",
    detail2: "Writing JSX to define the structure and layout of React components.   ",
    detail3: "Managing component state and passing data to components through props.",
    detail4: "Understanding component lifecycle methods like componentDidMount, componentDidUpdate, and componentWillUnmount.",
    detail5:"Learning React Hooks, such as useState, useEffect, and useContext, to manage state and side effects in functional components.",
    detail6:"Using conditional statements and ternary operators to render components conditionally.",
    detail7:"Rendering lists of data using the map function and specifying unique keys for each item.",
    detail8:"Handling form input and creating controlled components to manage form data.",
    detail9:"Managing events and event handlers in React components.",
    detail10:"Styling components using CSS-in-JS libraries like styled-components or traditional CSS.",
  },
  {
    id: 4,
    name: "Nodejs",
    img:"https://res.cloudinary.com/dwu1oncja/image/upload/f_auto,q_auto/v1/project_img/ecommerce",
    topics1: "Core Modules",
    topics2: "NPM (Node Package Manager)",
    topics3: "Event Loop",
    topics4: "Callbacks and Promises",
    topics5: "Streams",
    topics6: "File System Operations",
    topics7: "HTTP and Express.js",
    topics8: "Middleware",
    topics9: "Routing",
    topics10: "Database Interaction",
    definition:" Node.js, often referred to as Node, is an open-source, cross-platform JavaScript runtime environment designed for server-side development. It enables developers to build networked and scalable applications by executing JavaScript code on the server, rather than just in web browsers. This runtime is built on Google's V8 JavaScript engine and provides a non-blocking, event-driven architecture, which is highly efficient for handling asynchronous I/O operations.One of Node.js's defining features is its ability to run JavaScript on the server, making it a versatile technology for both web and back-end development. It facilitates the creation of web servers, APIs, and real-time applications, offering a streamlined and unified approach to programming across the entire application stack. Node.js supports the use of packages and modules, managed via the Node Package Manager (NPM), a vast repository of pre-built libraries and tools that greatly expedite development.    ",
    detail1: "Understanding and using Node.js core modules like fs (File System), http (HTTP server), and path (file path manipulation).",
    detail2: "Managing packages and dependencies using npm, including package installation, version control, and package.json configuration.",
    detail3: "Understanding the event loop and asynchronous, non-blocking I/O in Node.js.",
    detail4: "Handling asynchronous operations with callbacks and Promises for cleaner and more predictable code.",
    detail5:"Working with streams for efficient data processing, such as reading and writing large files.",
    detail6:"Reading, writing, and manipulating files and directories using the fs module.",
    detail7:"Creating web servers with the built-in http module or using Express.js for building RESTful APIs and web applications.",
    detail8:"Implementing middleware functions in Express.js for handling requests and responses.",
    detail9:"Defining routes and route parameters in Express.js for creating RESTful APIs.",
    detail10:"Connecting to databases (e.g., MongoDB, MySQL, PostgreSQL) using libraries such as Mongoose or Sequelize.",
  },
  {
    id: 5,
    name: "Mongodb",
    img:"https://res.cloudinary.com/dpqbph9ya/image/upload/f_auto,q_auto/v7sc2a2j3vctykhtln6m",
    topics1: "Database and Collection Structure",
    topics2: "Document-Oriented Data Model",
    topics3: "CRUD Operations",
    topics4: "Indexes",
    topics5: "Querying and Filtering",
    topics6: "Aggregation Framework",
    topics7: "Schema Design",
    topics8: "Data Modeling",
    topics9: "Normalization and Denormalization",
    topics10: "Transactions",
    definition:"MongoDB is a popular, open-source NoSQL database system designed to store and manage vast amounts of data efficiently. It belongs to the document-oriented database category and is known for its flexibility and scalability. MongoDB is not reliant on traditional relational database tables but stores data in BSON (Binary JSON) documents that can be nested and indexed.MongoDB's key features include its ability to handle large volumes of unstructured or semi-structured data, enabling developers to work with diverse data types without a fixed schema. This flexibility makes it suitable for a wide range of applications, from content management systems to real-time analytics and IoT platforms.",
    detail1: "Database and Collection Structure::Understanding how MongoDB organizes data into databases and collections.",
    detail2: "Document-Oriented Data Model:Grasping the concept of storing data as flexible, JSON-like documents (BSON format).",
    detail3: "CRUD Operations:Performing CRUD (Create, Read, Update, Delete) operations on MongoDB documents.",
    detail4: "Using indexes to optimize query performance and understanding the different types of indexes.",
    detail5:"Crafting queries using the MongoDB query language and operators.",
    detail6:"Aggregating and transforming data using the aggregation framework for complex queries.",
    detail7:"Designing schemas to meet application requirements, including embedding vs. referencing data.",
    detail8:"Understanding how to model data for various use cases, such as one-to-many and many-to-many relationships.",
    detail9:"Deciding when to normalize data (splitting it into multiple collections) and when to denormalize (embedding data).",
    detail10:"Managing transactions and ensuring data consistency for complex operations.",
  },
];

module.exports = project_data;
